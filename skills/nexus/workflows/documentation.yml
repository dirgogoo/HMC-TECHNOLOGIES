name: "Documentation Workflow"
description: "Comprehensive documentation workflow for API docs, READMEs, architecture guides, and onboarding materials"
version: "2.0.0"

metadata:
  intendedFor: ["documentation", "readme", "api-docs", "guide"]
  complexity: "small"
  estimatedDuration: 30  # minutes
  keywords: ["documentation", "readme", "docs", "api", "guide", "onboarding", "tutorial", "markdown"]

defaults:
  timeout: 600000  # 10 minutes per phase (writing can take time)
  on_failure: "prompt"
  on_timeout: "prompt"
  max_retries: 2

required:
  plugins: []  # Minimal requirements
  mcps: []  # All MCPs optional

triggers:
  keywords: ["document", "readme", "docs", "api documentation", "write guide", "onboarding"]
  complexity: ["small", "medium"]
  has_plan: false

phases:
  - id: "load-context"
    name: "Load Project Context"
    description: "Load memory, tech stack, existing documentation"
    timeout: 60000  # 1 minute
    hooks:
      - plugin: "ald-system"
        hook: "load-memory"
        required: false
    on_failure: "skip"

  - id: "recall-patterns"
    name: "Recall Similar Documentation"
    description: "Find examples of similar documentation (optional)"
    timeout: 120000  # 2 minutes
    dependencies: ["load-context"]
    hooks:
      - plugin: "mcp-episodic-memory"
        hook: "recall-patterns"
        required: false
    skip_if_mcp_unavailable: true
    optional: true
    on_failure: "skip"

  - id: "analyze-documentation-needs"
    name: "Analyze What Needs Documenting"
    description: "Identify gaps and determine documentation scope"
    timeout: 300000  # 5 minutes
    dependencies: ["load-context"]
    hooks: []
    analysis_checklist: |
      **Determine documentation type**:
      ☐ README (project overview)
      ☐ API Documentation (endpoints, methods, parameters)
      ☐ Architecture Guide (system design, decisions)
      ☐ User Guide (how-to, tutorials)
      ☐ Developer Onboarding (setup, conventions)
      ☐ Troubleshooting Guide (common issues)
      ☐ Changelog (version history)
      ☐ Contributing Guide (for open source)

      **Identify audience**:
      - End users (non-technical)
      - Developers using API
      - Contributors to codebase
      - Operations/DevOps team
      - Future maintainers

      **Assess current state**:
      - What documentation exists?
      - What's outdated?
      - What's missing?
      - What's confusing?

  - id: "create-outline"
    name: "Create Documentation Outline"
    description: "Structure the documentation before writing"
    timeout: 300000  # 5 minutes
    dependencies: ["analyze-documentation-needs"]
    hooks: []
    outline_template: |
      ## Documentation Outline

      **Title**: [Document Title]
      **Type**: [README | API Docs | Guide | Tutorial]
      **Audience**: [Primary audience]

      ### Sections:

      1. **[Section 1 Name]**
         - Key points to cover
         - Examples needed
         - Diagrams/visuals

      2. **[Section 2 Name]**
         - Key points
         - Code examples
         - Links to related docs

      3. **[Section 3 Name]**
         ...

      ### Visual Aids Needed:
      - [ ] Architecture diagram
      - [ ] Flow chart
      - [ ] Screenshots
      - [ ] Code examples

      ### Tone & Style:
      - Technical level: [Beginner | Intermediate | Advanced]
      - Voice: [Formal | Conversational | Tutorial]
      - Length target: [words/pages]

  - id: "write-documentation"
    name: "Write Documentation Content"
    description: "Write comprehensive, clear documentation"
    timeout: 1200000  # 20 minutes
    dependencies: ["create-outline"]
    hooks: []
    writing_guidelines: |
      **Writing Best Practices**:

      **1. Start with Why**
      - Explain purpose before details
      - Use case scenarios
      - Benefits to reader

      **2. Structure Clearly**
      - Use headings (h1, h2, h3)
      - Short paragraphs (3-5 sentences)
      - Bullet points for lists
      - Code blocks for examples

      **3. Code Examples**
      ```typescript
      // Good: Complete, runnable examples
      import { createClient } from '@supabase/supabase-js';

      const supabase = createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_ANON_KEY
      );

      // Fetch user data
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId);

      if (error) throw error;
      return data;
      ```

      **4. Visual Hierarchy**
      - Important info first
      - Most common use cases prominent
      - Advanced topics later

      **5. Links & References**
      - Link to related documentation
      - External resources
      - API reference links

      **6. Avoid**:
      - Jargon without explanation
      - Assumed knowledge
      - Outdated information
      - Broken links
      - Too much information at once

      **Common Documentation Types**:

      ### README Structure:
      ```markdown
      # Project Name

      Brief description (1-2 sentences)

      ## Features
      - Feature 1
      - Feature 2

      ## Installation
      ```bash
      npm install
      ```

      ## Quick Start
      ```typescript
      // Minimal example
      ```

      ## Documentation
      - [Full Documentation](./docs)
      - [API Reference](./api)

      ## Contributing
      See [CONTRIBUTING.md](./CONTRIBUTING.md)

      ## License
      MIT
      ```

      ### API Documentation Structure:
      ```markdown
      # API Endpoint: Create User

      ## Endpoint
      `POST /api/users`

      ## Description
      Creates a new user account

      ## Request
      ```json
      {
        "email": "user@example.com",
        "password": "secure123",
        "name": "John Doe"
      }
      ```

      ## Response
      ```json
      {
        "id": "user_123",
        "email": "user@example.com",
        "createdAt": "2025-10-29T14:30:00Z"
      }
      ```

      ## Error Codes
      - 400: Invalid email format
      - 409: Email already exists
      - 500: Server error

      ## Example
      ```typescript
      const response = await fetch('/api/users', {
        method: 'POST',
        body: JSON.stringify({ email, password, name })
      });
      ```
      ```

  - id: "add-code-examples"
    name: "Add and Test Code Examples"
    description: "Include working code examples"
    timeout: 600000  # 10 minutes
    dependencies: ["write-documentation"]
    hooks: []
    example_requirements: |
      **Code Example Requirements**:

      ☐ Examples are complete (can be copy-pasted and run)
      ☐ Examples use real API/methods
      ☐ Examples show common use cases
      ☐ Examples include error handling
      ☐ Examples are tested and verified
      ☐ Examples have comments explaining key parts

      **Test each example**:
      ```bash
      # If possible, run examples to verify they work
      node examples/basic-usage.js
      ```

      **Include examples for**:
      - Basic usage (most common case)
      - Authentication
      - Error handling
      - Edge cases (if relevant)
      - Integration with other systems

  - id: "add-visuals"
    name: "Add Diagrams and Screenshots (Optional)"
    description: "Visual aids to enhance understanding"
    timeout: 600000  # 10 minutes
    dependencies: ["write-documentation"]
    optional: true
    hooks: []
    visual_guidelines: |
      **When to add visuals**:
      - Complex architecture
      - User interface documentation
      - Flow diagrams (authentication, data flow)
      - System integrations

      **Diagram Tools**:
      - Mermaid (markdown-native)
      - Draw.io / Excalidraw
      - Sequence diagrams
      - Architecture diagrams

      **Mermaid Example**:
      ```mermaid
      graph TD
        A[User] --> B[Frontend]
        B --> C[API]
        C --> D[Database]
        C --> E[External Service]
      ```

      **Screenshot Guidelines**:
      - High resolution
      - Annotated (arrows, highlights)
      - Alt text for accessibility
      - Keep updated when UI changes

  - id: "validate-documentation"
    name: "Validate Documentation Quality"
    description: "Check for completeness, accuracy, clarity"
    timeout: 300000  # 5 minutes
    dependencies: ["add-code-examples"]
    hooks: []
    validation_checklist: |
      **Quality Checks**:

      ☐ **Completeness**
      - All sections from outline covered
      - No "TODO" or "Coming soon" placeholders
      - All links functional

      ☐ **Accuracy**
      - Code examples tested and working
      - API signatures match actual code
      - Version numbers correct
      - No outdated information

      ☐ **Clarity**
      - Sentences clear and concise
      - Technical terms explained
      - No ambiguity
      - Appropriate for target audience

      ☐ **Formatting**
      - Consistent heading levels
      - Code blocks formatted correctly
      - Tables render properly
      - Lists formatted consistently

      ☐ **Accessibility**
      - Alt text for images
      - Descriptive link text
      - Semantic HTML/Markdown
      - Readable font size

      ☐ **SEO/Discoverability** (if public docs)
      - Descriptive page titles
      - Meta descriptions
      - Keywords in headings
      - Internal linking

  - id: "peer-review"
    name: "Request Peer Review (Optional)"
    description: "Have someone else review the documentation"
    timeout: 0  # External process
    dependencies: ["validate-documentation"]
    optional: true
    hooks: []
    review_guidelines: |
      **Reviewer Instructions**:

      Review for:
      1. **Technical Accuracy**: Are the examples correct?
      2. **Clarity**: Can you understand it without prior knowledge?
      3. **Completeness**: Is anything missing?
      4. **Usability**: Can you follow the instructions?

      Provide feedback on:
      - Confusing sections
      - Missing information
      - Incorrect examples
      - Suggestions for improvement

      **Skip this phase if**:
      - Documentation is minor update
      - Time-sensitive update needed
      - Internal documentation only

  - id: "publish-documentation"
    name: "Publish and Link Documentation"
    description: "Make documentation discoverable"
    timeout: 180000  # 3 minutes
    dependencies: ["validate-documentation"]
    hooks: []
    publishing_checklist: |
      **Where to publish**:
      ☐ Project README links to detailed docs
      ☐ Documentation site updated (if applicable)
      ☐ API docs deployed
      ☐ Navigation updated
      ☐ Search indexed

      **Cross-linking**:
      - Link related documentation
      - Update table of contents
      - Add to sitemap (if web docs)

      **Announce**:
      - Update changelog
      - Notify team (if significant change)
      - Social media (if public project)

  - id: "learning-capture"
    name: "Capture Documentation Patterns"
    description: "Save learnings to ALD memory"
    timeout: 120000  # 2 minutes
    dependencies: ["publish-documentation"]
    hooks:
      - plugin: "ald-system"
        hook: "curator"
        required: false
    on_failure: "skip"
    capture_items: |
      Capture to ALD memory:
      - Documentation structure used
      - Effective examples created
      - Common questions addressed
      - Visual aids that worked well
      - Feedback received

workflow_notes: |
  **When to use Documentation Workflow**:
  - Creating new README
  - Writing API documentation
  - Developer onboarding guides
  - User tutorials
  - Architecture decision records (ADRs)
  - Troubleshooting guides

  **When NOT to use**:
  - Quick comment additions (do directly)
  - Inline code documentation (do during feature development)
  - Simple typo fixes (do directly)

  **Documentation Philosophy**:
  1. **Users First**: Write for the reader, not yourself
  2. **Show, Don't Just Tell**: Use examples liberally
  3. **Keep Updated**: Outdated docs worse than no docs
  4. **Be Concise**: Respect reader's time
  5. **Test Examples**: All code must work

  **Common Mistakes to Avoid**:
  - ❌ Assuming prior knowledge
  - ❌ Using jargon without explanation
  - ❌ Skipping error handling in examples
  - ❌ Breaking links when refactoring
  - ❌ Not testing code examples
  - ❌ Writing for yourself, not the audience

success_criteria:
  - Documentation complete and accurate
  - Code examples tested and working
  - All links functional
  - Appropriate for target audience
  - Published and discoverable

documentation_types:
  readme:
    sections: ["Overview", "Features", "Installation", "Quick Start", "Documentation Links", "Contributing", "License"]
    length: "short"
    audience: "developers"

  api_docs:
    sections: ["Endpoint", "Description", "Request", "Response", "Error Codes", "Examples"]
    length: "medium"
    audience: "API consumers"

  tutorial:
    sections: ["Prerequisites", "Step-by-Step", "Expected Results", "Troubleshooting", "Next Steps"]
    length: "long"
    audience: "learners"

  architecture_guide:
    sections: ["Overview", "Components", "Data Flow", "Decisions", "Trade-offs", "Future Considerations"]
    length: "long"
    audience: "architects, senior developers"

estimated_times:
  analyze_needs: "3-5 minutes"
  create_outline: "3-5 minutes"
  write_content: "15-20 minutes"
  add_examples: "5-10 minutes"
  validate: "3-5 minutes"
  publish: "2-3 minutes"
  total: "30-50 minutes"
